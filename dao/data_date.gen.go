// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dredger/model"
)

func newDataDate(db *gorm.DB, opts ...gen.DOOption) dataDate {
	_dataDate := dataDate{}

	_dataDate.dataDateDo.UseDB(db, opts...)
	_dataDate.dataDateDo.UseModel(&model.DataDate{})

	tableName := _dataDate.dataDateDo.TableName()
	_dataDate.ALL = field.NewAsterisk(tableName)
	_dataDate.ID = field.NewInt32(tableName, "id")
	_dataDate.ShipName = field.NewString(tableName, "ship_name")
	_dataDate.Date = field.NewInt64(tableName, "date")

	_dataDate.fillFieldMap()

	return _dataDate
}

type dataDate struct {
	dataDateDo

	ALL      field.Asterisk
	ID       field.Int32
	ShipName field.String
	Date     field.Int64

	fieldMap map[string]field.Expr
}

func (d dataDate) Table(newTableName string) *dataDate {
	d.dataDateDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataDate) As(alias string) *dataDate {
	d.dataDateDo.DO = *(d.dataDateDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataDate) updateTableName(table string) *dataDate {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.ShipName = field.NewString(table, "ship_name")
	d.Date = field.NewInt64(table, "date")

	d.fillFieldMap()

	return d
}

func (d *dataDate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataDate) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["ship_name"] = d.ShipName
	d.fieldMap["date"] = d.Date
}

func (d dataDate) clone(db *gorm.DB) dataDate {
	d.dataDateDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataDate) replaceDB(db *gorm.DB) dataDate {
	d.dataDateDo.ReplaceDB(db)
	return d
}

type dataDateDo struct{ gen.DO }

type IDataDateDo interface {
	gen.SubQuery
	Debug() IDataDateDo
	WithContext(ctx context.Context) IDataDateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataDateDo
	WriteDB() IDataDateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataDateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataDateDo
	Not(conds ...gen.Condition) IDataDateDo
	Or(conds ...gen.Condition) IDataDateDo
	Select(conds ...field.Expr) IDataDateDo
	Where(conds ...gen.Condition) IDataDateDo
	Order(conds ...field.Expr) IDataDateDo
	Distinct(cols ...field.Expr) IDataDateDo
	Omit(cols ...field.Expr) IDataDateDo
	Join(table schema.Tabler, on ...field.Expr) IDataDateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataDateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataDateDo
	Group(cols ...field.Expr) IDataDateDo
	Having(conds ...gen.Condition) IDataDateDo
	Limit(limit int) IDataDateDo
	Offset(offset int) IDataDateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataDateDo
	Unscoped() IDataDateDo
	Create(values ...*model.DataDate) error
	CreateInBatches(values []*model.DataDate, batchSize int) error
	Save(values ...*model.DataDate) error
	First() (*model.DataDate, error)
	Take() (*model.DataDate, error)
	Last() (*model.DataDate, error)
	Find() ([]*model.DataDate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataDate, err error)
	FindInBatches(result *[]*model.DataDate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataDate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataDateDo
	Assign(attrs ...field.AssignExpr) IDataDateDo
	Joins(fields ...field.RelationField) IDataDateDo
	Preload(fields ...field.RelationField) IDataDateDo
	FirstOrInit() (*model.DataDate, error)
	FirstOrCreate() (*model.DataDate, error)
	FindByPage(offset int, limit int) (result []*model.DataDate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataDateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataDateDo) Debug() IDataDateDo {
	return d.withDO(d.DO.Debug())
}

func (d dataDateDo) WithContext(ctx context.Context) IDataDateDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataDateDo) ReadDB() IDataDateDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataDateDo) WriteDB() IDataDateDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataDateDo) Session(config *gorm.Session) IDataDateDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataDateDo) Clauses(conds ...clause.Expression) IDataDateDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataDateDo) Returning(value interface{}, columns ...string) IDataDateDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataDateDo) Not(conds ...gen.Condition) IDataDateDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataDateDo) Or(conds ...gen.Condition) IDataDateDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataDateDo) Select(conds ...field.Expr) IDataDateDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataDateDo) Where(conds ...gen.Condition) IDataDateDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataDateDo) Order(conds ...field.Expr) IDataDateDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataDateDo) Distinct(cols ...field.Expr) IDataDateDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataDateDo) Omit(cols ...field.Expr) IDataDateDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataDateDo) Join(table schema.Tabler, on ...field.Expr) IDataDateDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataDateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataDateDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataDateDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataDateDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataDateDo) Group(cols ...field.Expr) IDataDateDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataDateDo) Having(conds ...gen.Condition) IDataDateDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataDateDo) Limit(limit int) IDataDateDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataDateDo) Offset(offset int) IDataDateDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataDateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataDateDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataDateDo) Unscoped() IDataDateDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataDateDo) Create(values ...*model.DataDate) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataDateDo) CreateInBatches(values []*model.DataDate, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataDateDo) Save(values ...*model.DataDate) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataDateDo) First() (*model.DataDate, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDate), nil
	}
}

func (d dataDateDo) Take() (*model.DataDate, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDate), nil
	}
}

func (d dataDateDo) Last() (*model.DataDate, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDate), nil
	}
}

func (d dataDateDo) Find() ([]*model.DataDate, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataDate), err
}

func (d dataDateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataDate, err error) {
	buf := make([]*model.DataDate, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataDateDo) FindInBatches(result *[]*model.DataDate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataDateDo) Attrs(attrs ...field.AssignExpr) IDataDateDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataDateDo) Assign(attrs ...field.AssignExpr) IDataDateDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataDateDo) Joins(fields ...field.RelationField) IDataDateDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataDateDo) Preload(fields ...field.RelationField) IDataDateDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataDateDo) FirstOrInit() (*model.DataDate, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDate), nil
	}
}

func (d dataDateDo) FirstOrCreate() (*model.DataDate, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDate), nil
	}
}

func (d dataDateDo) FindByPage(offset int, limit int) (result []*model.DataDate, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataDateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataDateDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataDateDo) Delete(models ...*model.DataDate) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataDateDo) withDO(do gen.Dao) *dataDateDo {
	d.DO = *do.(*gen.DO)
	return d
}
