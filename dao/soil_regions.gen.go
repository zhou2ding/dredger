// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dredger/model"
)

func newSoilRegion(db *gorm.DB, opts ...gen.DOOption) soilRegion {
	_soilRegion := soilRegion{}

	_soilRegion.soilRegionDo.UseDB(db, opts...)
	_soilRegion.soilRegionDo.UseModel(&model.SoilRegion{})

	tableName := _soilRegion.soilRegionDo.TableName()
	_soilRegion.ALL = field.NewAsterisk(tableName)
	_soilRegion.ID = field.NewInt32(tableName, "id")
	_soilRegion.XMin = field.NewFloat64(tableName, "x_min")
	_soilRegion.XMax = field.NewFloat64(tableName, "x_max")
	_soilRegion.YMin = field.NewFloat64(tableName, "y_min")
	_soilRegion.YMax = field.NewFloat64(tableName, "y_max")
	_soilRegion.ZMin = field.NewFloat64(tableName, "z_min")
	_soilRegion.ZMax = field.NewFloat64(tableName, "z_max")
	_soilRegion.SoilType = field.NewString(tableName, "soil_type")

	_soilRegion.fillFieldMap()

	return _soilRegion
}

// soilRegion 土质区域划分表
type soilRegion struct {
	soilRegionDo

	ALL      field.Asterisk
	ID       field.Int32
	XMin     field.Float64
	XMax     field.Float64
	YMin     field.Float64
	YMax     field.Float64
	ZMin     field.Float64
	ZMax     field.Float64
	SoilType field.String // 土质

	fieldMap map[string]field.Expr
}

func (s soilRegion) Table(newTableName string) *soilRegion {
	s.soilRegionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soilRegion) As(alias string) *soilRegion {
	s.soilRegionDo.DO = *(s.soilRegionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soilRegion) updateTableName(table string) *soilRegion {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.XMin = field.NewFloat64(table, "x_min")
	s.XMax = field.NewFloat64(table, "x_max")
	s.YMin = field.NewFloat64(table, "y_min")
	s.YMax = field.NewFloat64(table, "y_max")
	s.ZMin = field.NewFloat64(table, "z_min")
	s.ZMax = field.NewFloat64(table, "z_max")
	s.SoilType = field.NewString(table, "soil_type")

	s.fillFieldMap()

	return s
}

func (s *soilRegion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soilRegion) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["x_min"] = s.XMin
	s.fieldMap["x_max"] = s.XMax
	s.fieldMap["y_min"] = s.YMin
	s.fieldMap["y_max"] = s.YMax
	s.fieldMap["z_min"] = s.ZMin
	s.fieldMap["z_max"] = s.ZMax
	s.fieldMap["soil_type"] = s.SoilType
}

func (s soilRegion) clone(db *gorm.DB) soilRegion {
	s.soilRegionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soilRegion) replaceDB(db *gorm.DB) soilRegion {
	s.soilRegionDo.ReplaceDB(db)
	return s
}

type soilRegionDo struct{ gen.DO }

type ISoilRegionDo interface {
	gen.SubQuery
	Debug() ISoilRegionDo
	WithContext(ctx context.Context) ISoilRegionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISoilRegionDo
	WriteDB() ISoilRegionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISoilRegionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISoilRegionDo
	Not(conds ...gen.Condition) ISoilRegionDo
	Or(conds ...gen.Condition) ISoilRegionDo
	Select(conds ...field.Expr) ISoilRegionDo
	Where(conds ...gen.Condition) ISoilRegionDo
	Order(conds ...field.Expr) ISoilRegionDo
	Distinct(cols ...field.Expr) ISoilRegionDo
	Omit(cols ...field.Expr) ISoilRegionDo
	Join(table schema.Tabler, on ...field.Expr) ISoilRegionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISoilRegionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISoilRegionDo
	Group(cols ...field.Expr) ISoilRegionDo
	Having(conds ...gen.Condition) ISoilRegionDo
	Limit(limit int) ISoilRegionDo
	Offset(offset int) ISoilRegionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISoilRegionDo
	Unscoped() ISoilRegionDo
	Create(values ...*model.SoilRegion) error
	CreateInBatches(values []*model.SoilRegion, batchSize int) error
	Save(values ...*model.SoilRegion) error
	First() (*model.SoilRegion, error)
	Take() (*model.SoilRegion, error)
	Last() (*model.SoilRegion, error)
	Find() ([]*model.SoilRegion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoilRegion, err error)
	FindInBatches(result *[]*model.SoilRegion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SoilRegion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISoilRegionDo
	Assign(attrs ...field.AssignExpr) ISoilRegionDo
	Joins(fields ...field.RelationField) ISoilRegionDo
	Preload(fields ...field.RelationField) ISoilRegionDo
	FirstOrInit() (*model.SoilRegion, error)
	FirstOrCreate() (*model.SoilRegion, error)
	FindByPage(offset int, limit int) (result []*model.SoilRegion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISoilRegionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s soilRegionDo) Debug() ISoilRegionDo {
	return s.withDO(s.DO.Debug())
}

func (s soilRegionDo) WithContext(ctx context.Context) ISoilRegionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soilRegionDo) ReadDB() ISoilRegionDo {
	return s.Clauses(dbresolver.Read)
}

func (s soilRegionDo) WriteDB() ISoilRegionDo {
	return s.Clauses(dbresolver.Write)
}

func (s soilRegionDo) Session(config *gorm.Session) ISoilRegionDo {
	return s.withDO(s.DO.Session(config))
}

func (s soilRegionDo) Clauses(conds ...clause.Expression) ISoilRegionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soilRegionDo) Returning(value interface{}, columns ...string) ISoilRegionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soilRegionDo) Not(conds ...gen.Condition) ISoilRegionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soilRegionDo) Or(conds ...gen.Condition) ISoilRegionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soilRegionDo) Select(conds ...field.Expr) ISoilRegionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soilRegionDo) Where(conds ...gen.Condition) ISoilRegionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soilRegionDo) Order(conds ...field.Expr) ISoilRegionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soilRegionDo) Distinct(cols ...field.Expr) ISoilRegionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soilRegionDo) Omit(cols ...field.Expr) ISoilRegionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soilRegionDo) Join(table schema.Tabler, on ...field.Expr) ISoilRegionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soilRegionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISoilRegionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soilRegionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISoilRegionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soilRegionDo) Group(cols ...field.Expr) ISoilRegionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soilRegionDo) Having(conds ...gen.Condition) ISoilRegionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soilRegionDo) Limit(limit int) ISoilRegionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soilRegionDo) Offset(offset int) ISoilRegionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soilRegionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISoilRegionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soilRegionDo) Unscoped() ISoilRegionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soilRegionDo) Create(values ...*model.SoilRegion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soilRegionDo) CreateInBatches(values []*model.SoilRegion, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soilRegionDo) Save(values ...*model.SoilRegion) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soilRegionDo) First() (*model.SoilRegion, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoilRegion), nil
	}
}

func (s soilRegionDo) Take() (*model.SoilRegion, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoilRegion), nil
	}
}

func (s soilRegionDo) Last() (*model.SoilRegion, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoilRegion), nil
	}
}

func (s soilRegionDo) Find() ([]*model.SoilRegion, error) {
	result, err := s.DO.Find()
	return result.([]*model.SoilRegion), err
}

func (s soilRegionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoilRegion, err error) {
	buf := make([]*model.SoilRegion, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soilRegionDo) FindInBatches(result *[]*model.SoilRegion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soilRegionDo) Attrs(attrs ...field.AssignExpr) ISoilRegionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soilRegionDo) Assign(attrs ...field.AssignExpr) ISoilRegionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soilRegionDo) Joins(fields ...field.RelationField) ISoilRegionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soilRegionDo) Preload(fields ...field.RelationField) ISoilRegionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soilRegionDo) FirstOrInit() (*model.SoilRegion, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoilRegion), nil
	}
}

func (s soilRegionDo) FirstOrCreate() (*model.SoilRegion, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoilRegion), nil
	}
}

func (s soilRegionDo) FindByPage(offset int, limit int) (result []*model.SoilRegion, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soilRegionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soilRegionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soilRegionDo) Delete(models ...*model.SoilRegion) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soilRegionDo) withDO(do gen.Dao) *soilRegionDo {
	s.DO = *do.(*gen.DO)
	return s
}
