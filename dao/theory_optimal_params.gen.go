// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dredger/model"
)

func newTheoryOptimalParam(db *gorm.DB, opts ...gen.DOOption) theoryOptimalParam {
	_theoryOptimalParam := theoryOptimalParam{}

	_theoryOptimalParam.theoryOptimalParamDo.UseDB(db, opts...)
	_theoryOptimalParam.theoryOptimalParamDo.UseModel(&model.TheoryOptimalParam{})

	tableName := _theoryOptimalParam.theoryOptimalParamDo.TableName()
	_theoryOptimalParam.ALL = field.NewAsterisk(tableName)
	_theoryOptimalParam.ID = field.NewInt64(tableName, "id")
	_theoryOptimalParam.CreatedAt = field.NewTime(tableName, "created_at")
	_theoryOptimalParam.UpdatedAt = field.NewTime(tableName, "updated_at")
	_theoryOptimalParam.DeletedAt = field.NewField(tableName, "deleted_at")
	_theoryOptimalParam.ShipName = field.NewString(tableName, "ship_name")
	_theoryOptimalParam.Flow = field.NewFloat64(tableName, "flow")
	_theoryOptimalParam.Concentration = field.NewFloat64(tableName, "concentration")
	_theoryOptimalParam.SPumpRpm = field.NewFloat64(tableName, "s_pump_rpm")
	_theoryOptimalParam.CutterDepth = field.NewFloat64(tableName, "cutter_depth")
	_theoryOptimalParam.CarriageTravel = field.NewFloat64(tableName, "carriage_travel")
	_theoryOptimalParam.HorizontalSpeed = field.NewFloat64(tableName, "horizontal_speed")
	_theoryOptimalParam.BoosterPumpDischargePressure = field.NewFloat64(tableName, "booster_pump_discharge_pressure")
	_theoryOptimalParam.VacuumDegree = field.NewFloat64(tableName, "vacuum_degree")

	_theoryOptimalParam.fillFieldMap()

	return _theoryOptimalParam
}

// theoryOptimalParam 理论最优施工参数表
type theoryOptimalParam struct {
	theoryOptimalParamDo

	ALL                          field.Asterisk
	ID                           field.Int64   // 主键ID
	CreatedAt                    field.Time    // 创建时间
	UpdatedAt                    field.Time    // 更新时间
	DeletedAt                    field.Field   // 删除时间
	ShipName                     field.String  // 船名
	Flow                         field.Float64 // 流量(m³/h)
	Concentration                field.Float64 // 浓度(%)
	SPumpRpm                     field.Float64 // 水下泵转速(rpm)
	CutterDepth                  field.Float64 // 绞刀深度(m)
	CarriageTravel               field.Float64 // 台车行程(m)
	HorizontalSpeed              field.Float64 // 横移速度(m/min)
	BoosterPumpDischargePressure field.Float64 // 升压泵排出压力(bar)
	VacuumDegree                 field.Float64 // 真空度(kPa)

	fieldMap map[string]field.Expr
}

func (t theoryOptimalParam) Table(newTableName string) *theoryOptimalParam {
	t.theoryOptimalParamDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t theoryOptimalParam) As(alias string) *theoryOptimalParam {
	t.theoryOptimalParamDo.DO = *(t.theoryOptimalParamDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *theoryOptimalParam) updateTableName(table string) *theoryOptimalParam {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.ShipName = field.NewString(table, "ship_name")
	t.Flow = field.NewFloat64(table, "flow")
	t.Concentration = field.NewFloat64(table, "concentration")
	t.SPumpRpm = field.NewFloat64(table, "s_pump_rpm")
	t.CutterDepth = field.NewFloat64(table, "cutter_depth")
	t.CarriageTravel = field.NewFloat64(table, "carriage_travel")
	t.HorizontalSpeed = field.NewFloat64(table, "horizontal_speed")
	t.BoosterPumpDischargePressure = field.NewFloat64(table, "booster_pump_discharge_pressure")
	t.VacuumDegree = field.NewFloat64(table, "vacuum_degree")

	t.fillFieldMap()

	return t
}

func (t *theoryOptimalParam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *theoryOptimalParam) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["ship_name"] = t.ShipName
	t.fieldMap["flow"] = t.Flow
	t.fieldMap["concentration"] = t.Concentration
	t.fieldMap["s_pump_rpm"] = t.SPumpRpm
	t.fieldMap["cutter_depth"] = t.CutterDepth
	t.fieldMap["carriage_travel"] = t.CarriageTravel
	t.fieldMap["horizontal_speed"] = t.HorizontalSpeed
	t.fieldMap["booster_pump_discharge_pressure"] = t.BoosterPumpDischargePressure
	t.fieldMap["vacuum_degree"] = t.VacuumDegree
}

func (t theoryOptimalParam) clone(db *gorm.DB) theoryOptimalParam {
	t.theoryOptimalParamDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t theoryOptimalParam) replaceDB(db *gorm.DB) theoryOptimalParam {
	t.theoryOptimalParamDo.ReplaceDB(db)
	return t
}

type theoryOptimalParamDo struct{ gen.DO }

type ITheoryOptimalParamDo interface {
	gen.SubQuery
	Debug() ITheoryOptimalParamDo
	WithContext(ctx context.Context) ITheoryOptimalParamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITheoryOptimalParamDo
	WriteDB() ITheoryOptimalParamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITheoryOptimalParamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITheoryOptimalParamDo
	Not(conds ...gen.Condition) ITheoryOptimalParamDo
	Or(conds ...gen.Condition) ITheoryOptimalParamDo
	Select(conds ...field.Expr) ITheoryOptimalParamDo
	Where(conds ...gen.Condition) ITheoryOptimalParamDo
	Order(conds ...field.Expr) ITheoryOptimalParamDo
	Distinct(cols ...field.Expr) ITheoryOptimalParamDo
	Omit(cols ...field.Expr) ITheoryOptimalParamDo
	Join(table schema.Tabler, on ...field.Expr) ITheoryOptimalParamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITheoryOptimalParamDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITheoryOptimalParamDo
	Group(cols ...field.Expr) ITheoryOptimalParamDo
	Having(conds ...gen.Condition) ITheoryOptimalParamDo
	Limit(limit int) ITheoryOptimalParamDo
	Offset(offset int) ITheoryOptimalParamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITheoryOptimalParamDo
	Unscoped() ITheoryOptimalParamDo
	Create(values ...*model.TheoryOptimalParam) error
	CreateInBatches(values []*model.TheoryOptimalParam, batchSize int) error
	Save(values ...*model.TheoryOptimalParam) error
	First() (*model.TheoryOptimalParam, error)
	Take() (*model.TheoryOptimalParam, error)
	Last() (*model.TheoryOptimalParam, error)
	Find() ([]*model.TheoryOptimalParam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TheoryOptimalParam, err error)
	FindInBatches(result *[]*model.TheoryOptimalParam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TheoryOptimalParam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITheoryOptimalParamDo
	Assign(attrs ...field.AssignExpr) ITheoryOptimalParamDo
	Joins(fields ...field.RelationField) ITheoryOptimalParamDo
	Preload(fields ...field.RelationField) ITheoryOptimalParamDo
	FirstOrInit() (*model.TheoryOptimalParam, error)
	FirstOrCreate() (*model.TheoryOptimalParam, error)
	FindByPage(offset int, limit int) (result []*model.TheoryOptimalParam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITheoryOptimalParamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t theoryOptimalParamDo) Debug() ITheoryOptimalParamDo {
	return t.withDO(t.DO.Debug())
}

func (t theoryOptimalParamDo) WithContext(ctx context.Context) ITheoryOptimalParamDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t theoryOptimalParamDo) ReadDB() ITheoryOptimalParamDo {
	return t.Clauses(dbresolver.Read)
}

func (t theoryOptimalParamDo) WriteDB() ITheoryOptimalParamDo {
	return t.Clauses(dbresolver.Write)
}

func (t theoryOptimalParamDo) Session(config *gorm.Session) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Session(config))
}

func (t theoryOptimalParamDo) Clauses(conds ...clause.Expression) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t theoryOptimalParamDo) Returning(value interface{}, columns ...string) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t theoryOptimalParamDo) Not(conds ...gen.Condition) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t theoryOptimalParamDo) Or(conds ...gen.Condition) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t theoryOptimalParamDo) Select(conds ...field.Expr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t theoryOptimalParamDo) Where(conds ...gen.Condition) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t theoryOptimalParamDo) Order(conds ...field.Expr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t theoryOptimalParamDo) Distinct(cols ...field.Expr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t theoryOptimalParamDo) Omit(cols ...field.Expr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t theoryOptimalParamDo) Join(table schema.Tabler, on ...field.Expr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t theoryOptimalParamDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t theoryOptimalParamDo) RightJoin(table schema.Tabler, on ...field.Expr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t theoryOptimalParamDo) Group(cols ...field.Expr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t theoryOptimalParamDo) Having(conds ...gen.Condition) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t theoryOptimalParamDo) Limit(limit int) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t theoryOptimalParamDo) Offset(offset int) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t theoryOptimalParamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t theoryOptimalParamDo) Unscoped() ITheoryOptimalParamDo {
	return t.withDO(t.DO.Unscoped())
}

func (t theoryOptimalParamDo) Create(values ...*model.TheoryOptimalParam) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t theoryOptimalParamDo) CreateInBatches(values []*model.TheoryOptimalParam, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t theoryOptimalParamDo) Save(values ...*model.TheoryOptimalParam) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t theoryOptimalParamDo) First() (*model.TheoryOptimalParam, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheoryOptimalParam), nil
	}
}

func (t theoryOptimalParamDo) Take() (*model.TheoryOptimalParam, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheoryOptimalParam), nil
	}
}

func (t theoryOptimalParamDo) Last() (*model.TheoryOptimalParam, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheoryOptimalParam), nil
	}
}

func (t theoryOptimalParamDo) Find() ([]*model.TheoryOptimalParam, error) {
	result, err := t.DO.Find()
	return result.([]*model.TheoryOptimalParam), err
}

func (t theoryOptimalParamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TheoryOptimalParam, err error) {
	buf := make([]*model.TheoryOptimalParam, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t theoryOptimalParamDo) FindInBatches(result *[]*model.TheoryOptimalParam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t theoryOptimalParamDo) Attrs(attrs ...field.AssignExpr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t theoryOptimalParamDo) Assign(attrs ...field.AssignExpr) ITheoryOptimalParamDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t theoryOptimalParamDo) Joins(fields ...field.RelationField) ITheoryOptimalParamDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t theoryOptimalParamDo) Preload(fields ...field.RelationField) ITheoryOptimalParamDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t theoryOptimalParamDo) FirstOrInit() (*model.TheoryOptimalParam, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheoryOptimalParam), nil
	}
}

func (t theoryOptimalParamDo) FirstOrCreate() (*model.TheoryOptimalParam, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TheoryOptimalParam), nil
	}
}

func (t theoryOptimalParamDo) FindByPage(offset int, limit int) (result []*model.TheoryOptimalParam, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t theoryOptimalParamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t theoryOptimalParamDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t theoryOptimalParamDo) Delete(models ...*model.TheoryOptimalParam) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *theoryOptimalParamDo) withDO(do gen.Dao) *theoryOptimalParamDo {
	t.DO = *do.(*gen.DO)
	return t
}
